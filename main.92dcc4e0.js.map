{"version":3,"sources":["scripts/main.js"],"names":["start","document","querySelector","restart","startMessage","gameScore","info","winMessage","gameOverMessage","table","rows","rowsArray","typeOfMoves","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","cellStyle","Map","Tile","isOccupied","className","get","value","row","cell","td","currentPosition","x","y","Game","message","startCellsNum","height","width","field","availableCells","winningNumber","bonusScoreNode","bonusScore","arr","tile","cells","offsetLeft","offsetTop","push","initField","createElement","style","position","append","classList","add","getRandom","col","renderRandomTile","checkAvailableCells","rest","length","min","max","Math","random","parseInt","element","gameTile","lineHeight","zIndex","left","top","innerText","toggle","node","remove","setTimeout","bind","i","shiftNotEmptyCells","mergeCells","checkTileScore","eventKey","moveLeft","moveRight","moveUp","moveDown","renderScore","fromCell","toCell","updateBonusScore","cellsEmpty","forEach","getPossibleMoves","stopGame","canBeMerged","removeEventListener","kewDownEvent","e","hasOwnProperty","key","getDirection","generateValue","initBonusScore","resetGameDependencies","obj","gameLogic","addEventListener","once"],"mappings":"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","file":"main.92dcc4e0.js","sourceRoot":"../src","sourcesContent":["/* eslint-disable max-len */\n'use strict';\n\n// const { formatters } = require('stylelint');\n\nconst start = document.querySelector('.start');\nconst restart = document.querySelector('.restart');\nconst startMessage = document.querySelector('.message-start');\nconst gameScore = document.querySelector('.game-score');\nconst info = document.querySelector('.info');\nconst winMessage = document.querySelector('.message-win');\nconst gameOverMessage = document.querySelector('.message-lose');\nconst table = document.querySelector('table');\nconst [...rowsArray] = table.rows;\n\nconst typeOfMoves = {\n  ArrowLeft: 'leftHandler',\n  ArrowRight: 'rightHandler',\n  ArrowUp: 'upHandler',\n  ArrowDown: 'downHandler',\n};\nconst cellStyle = new Map([\n  [2, 'field-cell--2'],\n  [4, 'field-cell--4'],\n  [8, 'field-cell--8'],\n  [16, 'field-cell--16'],\n  [32, 'field-cell--32'],\n  [64, 'field-cell--64'],\n  [128, 'field-cell--128'],\n  [256, 'field-cell--256'],\n  [512, 'field-cell--512'],\n  [1024, 'field-cell--1024'],\n  [2048, 'field-cell--2048'],\n]);\n\nclass Tile {\n  constructor() {\n    this.isOccupied = false;\n    this.className = cellStyle.get(0);\n    this.value = 0;\n    this.row = 0;\n    this.cell = 0;\n    this.td = null;\n\n    this.currentPosition = {\n      x: 0,\n      y: 0,\n    };\n  }\n}\nclass Game {\n  constructor() {\n    this.message = null;\n    this.startCellsNum = 0;\n    this.height = 4;\n    this.width = 4;\n    this.field = [];\n    this.gameScore = 0;\n    this.availableCells = 16;\n    this.winningNumber = 2048;\n    this.bonusScoreNode = null;\n    this.bonusScore = 0;\n  }\n  initField(arr, width) {\n    if (width === this.width) {\n      return;\n    }\n\n    const row = [];\n\n    for (let cell = 0; cell < this.height; cell++) {\n      const tile = new Tile();\n\n      tile.currentPosition.x = rowsArray[width].cells[cell].offsetLeft;\n      tile.currentPosition.y = rowsArray[width].cells[cell].offsetTop;\n      row.push(tile);\n    }\n    arr.push(row);\n    this.initField(arr, width + 1);\n  }\n  initBonusScore() {\n    const bonusScoreNode = document.createElement('div');\n\n    bonusScoreNode.style.position = 'absolute';\n    bonusScoreNode.className = 'score';\n    info.append(bonusScoreNode);\n    bonusScoreNode.classList.add('hidden');\n    this.bonusScoreNode = bonusScoreNode;\n  }\n  generateValue() {\n    if (this.availableCells === 0) {\n      return;\n    }\n    this.startCellsNum = (this.availableCells >= 2) ? 2 : 1;\n\n    while (this.startCellsNum > 0) {\n      const row = this.getRandom(this.width);\n      const col = this.getRandom(this.height);\n\n      if (!this.field[row][col].isOccupied) {\n        const tile = this.field[row][col];\n\n        tile.isOccupied = true;\n        tile.value = this.getRandom(0, 1);\n        this.renderRandomTile(tile, rowsArray[row].cells[col]);\n        this.startCellsNum--;\n      }\n    }\n    this.checkAvailableCells();\n  }\n  getRandom(...rest) {\n    if (rest.length > 1) {\n      const min = rest[0];\n      const max = rest[1];\n      const value = Math.random() * (max - min) + min;\n\n      return (value <= 0.1) ? 4 : 2;\n    }\n\n    return parseInt(Math.random() * rest - 0.0001);\n  }\n  renderRandomTile(element, gameTile) {\n    const style = cellStyle.get(element.value);\n\n    element.td = document.createElement('td');\n    element.td.className = 'field-cell';\n    element.td.style.position = 'absolute';\n    element.td.style.lineHeight = '75px';\n    element.td.style.zIndex = 2;\n    element.td.style.left = element.currentPosition.x + 'px';\n    element.td.style.top = element.currentPosition.y + 'px';\n    element.td.innerText = element.value;\n    element.td.classList.toggle(style);\n    element.className = style;\n    element.td.classList.add('animate');\n    gameTile.append(element.td);\n  }\n  renderScore() {\n    gameScore.innerText = this.gameScore;\n  }\n  updateBonusScore(node) {\n    node.classList.remove('hidden');\n    node.classList.add('move');\n    node.innerText = `+${this.bonusScore}`;\n    gameScore.innerText = this.gameScore;\n\n    setTimeout(function() {\n      node.classList.remove('move');\n      node.classList.add('hidden');\n      this.bonusScore = 0;\n    }.bind(this), 500);\n  }\n  moveUp() {\n    for (let col = 0; col < this.height; col++) {\n      for (let row = 0; row < this.width; row++) {\n        if (!this.field[row][col].isOccupied) {\n          continue;\n        }\n\n        let i = row;\n\n        while (i > 0 && !this.field[i - 1][col].isOccupied) {\n          this.shiftNotEmptyCells(this.field[i][col], this.field[i - 1][col]);\n          i--;\n        }\n\n        if (i > 0) {\n          if (this.field[i - 1][col].value === this.field[i][col].value) {\n            this.mergeCells(this.field[i][col], this.field[i - 1][col]);\n            this.checkTileScore(this.field[i - 1][col]);\n          }\n        }\n      }\n    }\n  }\n  moveDown() {\n    for (let col = 0; col < this.width; col++) {\n      for (let row = this.height - 1; row >= 0; row--) {\n        if (!this.field[row][col].isOccupied) {\n          continue;\n        }\n\n        let i = row;\n\n        while (i < this.height - 1 && !this.field[i + 1][col].isOccupied) {\n          this.shiftNotEmptyCells(this.field[i][col], this.field[i + 1][col]);\n\n          i++;\n        }\n\n        if (i < this.height - 1) {\n          if (this.field[i + 1][col].value === this.field[i][col].value) {\n            this.mergeCells(this.field[i][col], this.field[i + 1][col]);\n            this.checkTileScore(this.field[i + 1][col]);\n          }\n        }\n      }\n    }\n  }\n  moveLeft() {\n    for (let row = 0; row < this.width; row++) {\n      for (let col = 0; col < this.height; col++) {\n        if (!this.field[row][col].isOccupied) {\n          continue;\n        }\n\n        let i = col;\n\n        while (i > 0 && !this.field[row][i - 1].isOccupied) {\n          this.shiftNotEmptyCells(this.field[row][i], this.field[row][i - 1]);\n\n          i--;\n        }\n\n        if (i > 0) {\n          if (this.field[row][i - 1].value === this.field[row][i].value) {\n            this.mergeCells(this.field[row][i], this.field[row][i - 1]);\n            this.checkTileScore(this.field[row][i - 1]);\n          }\n        }\n      }\n    }\n  }\n  moveRight() {\n    for (let row = 0; row < this.width; row++) {\n      for (let col = this.height - 1; col >= 0; col--) {\n        if (!this.field[row][col].isOccupied) {\n          continue;\n        }\n\n        let i = col;\n\n        while (i < this.height - 1 && !this.field[row][i + 1].isOccupied) {\n          this.shiftNotEmptyCells(this.field[row][i], this.field[row][i + 1]);\n\n          i++;\n        }\n\n        if (i < this.height - 1) {\n          if (this.field[row][i + 1].value === this.field[row][i].value) {\n            this.mergeCells(this.field[row][i], this.field[row][i + 1]);\n            this.checkTileScore(this.field[row][i + 1]);\n          }\n        }\n      }\n    }\n  }\n  getDirection(eventKey) {\n    switch (eventKey) {\n      case 'ArrowLeft': {\n        this.moveLeft();\n        break;\n      }\n\n      case 'ArrowRight': {\n        this.moveRight();\n        break;\n      }\n\n      case 'ArrowUp': {\n        this.moveUp();\n        break;\n      }\n\n      case 'ArrowDown': {\n        this.moveDown();\n        break;\n      }\n    }\n    this.renderScore();\n  }\n  shiftNotEmptyCells(fromCell, toCell) {\n    toCell.value = fromCell.value;\n    toCell.isOccupied = true;\n    toCell.td = fromCell.td;\n    toCell.td.classList.toggle(cellStyle.get(toCell.value));\n\n    fromCell.value = 0;\n    fromCell.isOccupied = false;\n    fromCell.td.classList.toggle(cellStyle.get(toCell.value));\n\n    toCell.td.style.left = toCell.currentPosition.x + 'px';\n    toCell.td.style.top = toCell.currentPosition.y + 'px';\n    toCell.td.innerText = toCell.value;\n    fromCell.td = null;\n  }\n  mergeCells(fromCell, toCell) {\n    toCell.value *= 2;\n    this.gameScore += toCell.value;\n    this.bonusScore += toCell.value;\n    this.updateBonusScore(this.bonusScoreNode);\n\n    if (toCell.td !== null) {\n      toCell.td.remove();\n    }\n    toCell.td = fromCell.td;\n\n    toCell.td.style.left = toCell.currentPosition.x + 'px';\n    toCell.td.style.top = toCell.currentPosition.y + 'px';\n    toCell.td.innerText = toCell.value;\n    toCell.td.classList.toggle(cellStyle.get(toCell.value));\n    toCell.td.classList.remove('animate');\n    toCell.td.classList.toggle('pulse');\n\n    setTimeout(function() {\n      if (toCell.td !== null) {\n        toCell.td.classList.remove('pulse');\n      }\n    }, 500);\n\n    fromCell.value = 0;\n    fromCell.isOccupied = false;\n  }\n  checkAvailableCells() {\n    let cellsEmpty = 0;\n\n    this.field.forEach(row => {\n      row.forEach(cell => {\n        cellsEmpty += (cell.isOccupied === false) ? 1 : 0;\n      });\n    });\n    this.availableCells = cellsEmpty;\n\n    if (this.availableCells === 0) {\n      if (this.getPossibleMoves() === false) {\n        this.stopGame(gameOverMessage);\n      }\n    }\n  }\n  checkTileScore(tile) {\n    return (tile.value === this.winningNumber) ? this.stopGame(winMessage) : true;\n  }\n  getPossibleMoves() {\n    let canBeMerged = false;\n\n    for (let row = 0; row < this.width; row++) {\n      for (let cell = 0; cell < this.height; cell++) {\n        if (row > 0) {\n          canBeMerged = canBeMerged || (this.field[row - 1][cell].value === this.field[row][cell].value);\n        }\n\n        if (row < this.width - 1) {\n          canBeMerged = canBeMerged || (this.field[row + 1][cell].value === this.field[row][cell].value);\n        }\n\n        if (cell > 0) {\n          canBeMerged = canBeMerged || (this.field[row][cell - 1].value === this.field[row][cell].value);\n        }\n\n        if (cell < this.height - 1) {\n          canBeMerged = canBeMerged || this.field[row][cell + 1].value === this.field[row][cell].value;\n        }\n\n        if (canBeMerged === true) {\n          return true;\n        }\n      }\n    }\n\n    return canBeMerged;\n  }\n  stopGame(message) {\n    this.message = message;\n    this.renderScore();\n    message.classList.remove('hidden');\n    document.removeEventListener('keydown', kewDownEvent);\n  }\n  resetGameDependencies() {\n    this.field.forEach(element => {\n      element.forEach(tile => {\n        if (tile.td != null) {\n          tile.td.remove();\n          tile.td = null;\n        }\n        tile.value = 0;\n        tile.isOccupied = false;\n        this.className = cellStyle.get(0);\n      });\n    });\n    this.gameScore = 0;\n    this.bonusScore = 0;\n    this.startCellsNum = 0;\n    this.availableCells = 16;\n  }\n  gameLogic(e) {\n    if (!typeOfMoves.hasOwnProperty(e.key)) {\n      return;\n    }\n    this.getDirection(e.key);\n    this.checkAvailableCells();\n    this.generateValue();\n    this.renderScore();\n  }\n  start(message) {\n    message.classList.add('hidden');\n    this.initField(this.field, 0);\n    this.generateValue();\n    this.renderScore();\n    this.initBonusScore();\n  }\n  restart() {\n    if (this.message !== null) {\n      this.message.classList.add('hidden');\n    }\n    this.resetGameDependencies();\n    this.generateValue();\n    this.renderScore();\n  }\n};\n\nconst obj = new Game();\nconst kewDownEvent = (e) => {\n  obj.gameLogic(e);\n};\n\nstart.addEventListener('click', () => {\n  obj.start(startMessage);\n  start.classList.add('hidden');\n  restart.classList.remove('hidden');\n  document.addEventListener('keydown', kewDownEvent);\n}, { once: true });\n\nrestart.addEventListener('click', () => {\n  obj.restart();\n  document.addEventListener('keydown', kewDownEvent);\n});\n"]}